name: Create Release
on:
  repository_dispatch:
    types: [tests-passed]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release'
        required: true
        type: string
      sha:
        description: 'Commit hash to create release from'
        required: true
        type: string
      prerelease:
        description: 'Create as a pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # so can create release and create tag
    env:
      RELEASE_VERSION: ${{ github.event.client_payload.version || github.event.inputs.version }}
      COMMIT_SHA: ${{ github.event.client_payload.sha || github.event.inputs.sha }}
      MANUAL_PRERELEASE: ${{ github.event.inputs.prerelease || false }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Checkout specific commit
        run: |
          git checkout ${{ env.COMMIT_SHA }}
      
      - name: Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "${{ env.RELEASE_VERSION }}"
          git push origin "${{ env.RELEASE_VERSION }}"
      
      - name: Determine if pre-release
        id: check_prerelease
        run: |
          # Check if version ends with -pre or if manually set to prerelease
          if [[ "${{ env.RELEASE_VERSION }}" == *-pre ]] || [[ "${{ env.MANUAL_PRERELEASE }}" == "true" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.IS_PRERELEASE }}" == "true" ]; then
            gh release create "${{ env.RELEASE_VERSION }}" \
              --target ${{ env.COMMIT_SHA }} \
              --draft \
              --prerelease \
              --generate-notes
          else
            gh release create "${{ env.RELEASE_VERSION }}" \
              --target ${{ env.COMMIT_SHA }} \
              --draft \
              --generate-notes
          fi
